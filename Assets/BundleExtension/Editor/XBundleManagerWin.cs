// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using UnityEngine;
using UnityEditor;
using System.IO;
using System.Collections.Generic;
using System;
using LitJson;
using wuxingogo.Tools;

namespace wuxingogo.bundle
{
    public class XBundleManagerWin : XBaseWindow
    {

        [MenuItem( "Window/BundleManager Window" )]
        static void Initialization()
        {
            InitWindow<XBundleManagerWin>();
        }

        bool isPackageInApp = false;
        BuildTarget buildTarget = BuildTarget.Android;
        List<BundleInfo> bundles = new List<BundleInfo>();

        private VersionConfig currVersion = null;

        public string BuildPath
        {
            get
            {
                return "AssetBundles/" + buildTarget + "/" + BundleConfig.bundleRelativePath;
            }
        }

        public string ResourcesPath
        {
            get
            {
                return BundleConfig.resourcesPath + "/" + BundleConfig.bundleRelativePath;
            }
        }

        public override bool IsAutoScroll
        {
            get
            {
                return false;
            }
        }

        public override void OnXGUI()
        {
            BeginHorizontal();
            CreateLabel( "Version Name" );
            BundleConfig.versionFileName = CreateStringField( BundleConfig.versionFileName );
            EndHorizontal();
            BeginHorizontal();
            CreateLabel( "Encrypt Key" );
            BundleConfig.password = CreateStringField( BundleConfig.password );
            EndHorizontal();

            BeginHorizontal();
            CreateLabel( "Package In App" );
            isPackageInApp = CreateCheckBox( isPackageInApp );
            EndHorizontal();

            BeginHorizontal();
            CreateLabel( "Target Platform" );
            buildTarget = ( BuildTarget )CreateEnumSelectable( buildTarget );
            EndHorizontal();

            if( CreateSpaceButton( "Create New Version" ) )
                CreateNewVersion();

            DoButton( "Open A Bundle", GetAssetPoolBundles );
            CreateLabel( Application.temporaryCachePath, true );
        }

        void CreateNewVersion()
        {
            if( !Directory.Exists( BundleConfig.bundlePoolRelativePath + "/" + buildTarget ) )
            {
                Directory.CreateDirectory( BundleConfig.bundlePoolRelativePath + "/" + buildTarget );
            }
            BuildPipeline.BuildAssetBundles( BundleConfig.bundlePoolRelativePath + "/" + buildTarget,
                BuildAssetBundleOptions.UncompressedAssetBundle, buildTarget );

            GetAllBundles();
            CopyResources();
            CreateVersionFile( bundles, isPackageInApp );

            AssetDatabase.Refresh();


        }

        void GetAssetPoolBundles()
        {
            string relativePath = BuildPath + "/" + BundleConfig.versionFileName;

            var memory = File.ReadAllBytes( relativePath );

            using( MemoryStream memoryStream = new MemoryStream() )
            {
                byte[] length = null;
                int offset = System.Runtime.InteropServices.Marshal.SizeOf( typeof( int ) );
                memoryStream.Write( memory, 0, offset );
                length = memoryStream.ToArray();
                var versionLength = BitConverter.ToInt32( length, 0 );


                memoryStream.Position = 0;
                memoryStream.Write( memory, offset, versionLength );
                byte[] versionByte = memoryStream.ToArray();
                using( MemoryStream versionStream = new MemoryStream( versionByte ) )
                {
                    string versionContent = "";
                    StreamUtils.Read( versionStream, out versionContent );
                    currVersion = JsonMapper.ToObject<VersionConfig>( versionContent );
                }

                offset = offset + versionByte.Length;
                int limit = memory.Length - offset;

                memoryStream.Position = 0;
                memoryStream.Write( memory, offset, limit );
                byte[] buffer = memoryStream.ToArray();
                int index = 0;
                int count = 0;
                foreach( var item in currVersion.bundles )
                {
                    count = ( int )item.size;
                    using( MemoryStream bundleStream = new MemoryStream() )
                    {
                        bundleStream.Write( buffer, index, count );
                        var decryptBuffer = BundleEncode.DeompressAndDecryptLZMA( bundleStream.ToArray(), BundleConfig.password );
                        var assetbundle = AssetBundle.CreateFromMemoryImmediate( decryptBuffer.ToArray() );
                        assetbundle.Unload( true );

                    }
                    index += count;
                }

            }

        }

        void GetAllBundles()
        {
            bundles.Clear();
            var allBundle = AssetDatabase.GetAllAssetBundleNames();
            foreach( var bundleName in allBundle )
            {

                BundleInfo bundle = new BundleInfo( bundleName );
                bundles.Add( bundle );
            }
        }

        void CopyResources()
        {
            string destPath = isPackageInApp
                ? BundleConfig.resourcesPath + "/" + BundleConfig.bundleRelativePath
                : BuildPath;
            if( Directory.Exists( destPath ) )
            {
                Directory.Delete( destPath, true );
            }
            Directory.CreateDirectory( destPath );

            foreach( var bundle in bundles )
            {

                var bytes = File.ReadAllBytes( BundleConfig.bundlePoolRelativePath + "/" + buildTarget + "/" + bundle.name );
                var memory = BundleEncode.GetCompressAndEncryptLZMA( bytes, BundleConfig.password );

                bundle.size = ( uint )memory.Length;
                bundle.md5 = BundleEncode.GetFileMD5( memory );

                if( isPackageInApp ){
                    BundleEncode.CreateBinaryFile( destPath + "/" + bundle.name + BundleConfig.suffix, memory );
                }
                else if(!isPackageInApp && !bundle.isExist() ){
                    BundleEncode.CreateBinaryFile( destPath + "/" + BundleConfig.versionFileName, memory );
                }
            }
        }

        public void CreateVersionFile( List<BundleInfo> bundles, bool copyToStreamingAssets = false )
        {
            string destPath = "";
            if( copyToStreamingAssets )
                destPath = ResourcesPath + "/" + BundleConfig.versionFileName + BundleConfig.suffix;
            else
                destPath =  BuildPath + BundleConfig.versionFileName;

            VersionConfig vc = new VersionConfig();
            vc.versionNum = DateTime.Now.ToString();
            vc.bundleRelativePath = BundleConfig.bundleRelativePath;


            if( !copyToStreamingAssets )
            {
                foreach( var item in bundles )
                {
                    if( !item.isExist() )
                    {
                        vc.bundles.Add( item );
                    }
                }
            }
            else
            {
                vc.bundles = bundles;
            }
            string verJson = JsonMapper.ToJson( vc );
            
            BundleEncode.CreateBinaryFileAndHead( destPath, verJson );
            // Diff version file
            //BundleManager.GetInstance ().UpdateLocalVersionConfig (vc, destPath + "/" + BundleConfig.versionFileName + BundleConfig.suffix);
        }

    }
}