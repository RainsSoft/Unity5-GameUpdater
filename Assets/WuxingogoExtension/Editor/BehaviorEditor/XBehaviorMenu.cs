//
//  XBehaviorMenu.cs
//
//  Author:
//       ${wuxingogo} <52111314ly@gmail.com>
//
//  Copyright (c) 2015 wuxingogo
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEditor;
using UnityEngine;
using XBehaviorRunntime;
using wuxingogo.Runtime;


namespace XBehaviorEditor
{

	public class XBehaviorMenu
	{
		XBehaviorStateNode currentNode = null;
		public XBehaviorMenu(XBehaviorStateNode currentNode = null)
		{
			GenericMenu menu = new GenericMenu();
			this.currentNode = currentNode;
			
			if( currentNode == null )
			{
				menu.AddItem( new GUIContent( "Add State Node" ), false, NoneCallback, "StateNode" );
			}
			else
			{
				menu.AddItem( new GUIContent( "Add DebugLog Action" ), false, SelectedCallback, "DebugLog" );
				menu.AddSeparator( "" );
				menu.AddItem( new GUIContent( "Add Event" ), false, SelectedCallback, "Event" );
			}
			
			menu.ShowAsContext();
		}
		
		void NoneCallback( object handle ){
			switch(handle.ToString()){
				case "StateNode":
				XBehaviorEditor.GetInstance().AddState();
				break;
				
			}
			
		}
		
		void SelectedCallback( object handle )
		{
			switch( handle.ToString() )
			{
				case "DebugLog":
					XDebugLog log = new XDebugLog();
					log.name = "XDebugAction";
					currentNode.AddFSMAction(log);
					break;
				case "Event":
					XBehaviorEvent condition = new XBehaviorEvent("");
					condition.name = "Finish";
					currentNode.AddFSMEvent(condition);
					break;
			}
		}
	}
}

