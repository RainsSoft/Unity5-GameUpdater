// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------




namespace wuxingogo.Code
{
	using UnityEditor;
	using System.Collections;
	using UnityEngine;
	using System;
	using System.Reflection;


	public class CodeReviewEditor : XBaseWindow
	{
		[MenuItem( "Wuxingogo/Code/CodeReviewEditor" )]
		static void Initialization()
		{
			InitWindow<CodeReviewEditor>();
		}

		private UnityEngine.Object ScriptFile = null;
		private BindingFlags flags = BindingFlags.Default;

		public override void OnXGUI()
		{
			DoButton( "OpenMonoScript", OpenMonoScript );

			DoButton( "Clear", () => ScriptFile = null );

			ScriptFile = CreateObjectField( ScriptFile );

			flags = (BindingFlags)CreateEnumPopup( "BindingFlags", flags );

			if( null != ScriptFile ) {

				Type scriptType = ScriptFile.GetType();

				CreateLabel( "Fields" );
				if( scriptType == typeof( MonoScript ) ) {
					scriptType = ( ScriptFile as MonoScript ).GetClass();
				}
				ShowMemberInfo( scriptType.GetFields( flags ) );

				CreateLabel( "Properties" );
				ShowMemberInfo( scriptType.GetProperties( flags ) );

				CreateLabel( "Members" );
				ShowMemberInfo( scriptType.GetMembers( flags ) );
			}
        	
		}

		public void ShowMemberInfo(MemberInfo[] memberInfo)
		{
			for( int pos = 0; pos < memberInfo.Length; pos++ ) {
				//  TODO loop in memberInfo.Length
				BeginHorizontal();
				CreateLabel( memberInfo[pos].ToString() );
				CreateLabel( memberInfo[pos].DeclaringType.ToString() );
				ShowBaseType( memberInfo[pos] );
				CreateSpaceButton( memberInfo[pos].Name );
				EndHorizontal();
			}
		}

		private void ShowBaseType(MemberInfo memberInfo)
		{
			MemberTypes type = memberInfo.MemberType;
			CreateEnumPopup(type);
			switch( type ) {
				case MemberTypes.Field:
					FieldInfo field = (FieldInfo)memberInfo;
					CreateEnumPopup(field.Attributes );
				break;
				case MemberTypes.Method:
					MethodInfo method = (MethodInfo)memberInfo;
					CreateEnumPopup(method.Attributes );
				break;
				case MemberTypes.Property:
					PropertyInfo property = (PropertyInfo)memberInfo;
					CreateEnumPopup(property.Attributes );
				break;
			}

		}

		private void OpenMonoScript()
		{
			string path = EditorUtility.OpenFilePanel( "Open A Template", XEditorSetting.ProjectPath, "" );
			if( path == "" )
				return;
			
			path = FileUtil.GetProjectRelativePath( path );

			ScriptFile = AssetDatabase.LoadAssetAtPath<MonoScript>( path );

			Debug.Log( "script is : " + ScriptFile.ToString() );
		}
	}
}
