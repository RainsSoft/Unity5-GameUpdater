//
//  XBehaviorState.cs
//
//  Author:
//       ${wuxingogo} <52111314ly@gmail.com>
//
//  Copyright (c) 2015 wuxingogo
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System.Collections.Generic;
using UnityEngine;

namespace wuxingogo.Runtime
{
//	[System.Serializable]
	public class XBehaviorState : ScriptableObject
	{
		public List<XBehaviorAction> actions = new List<XBehaviorAction>();
		public List<XBehaviorEvent> events = new List<XBehaviorEvent>();
		
		public string Name = "Default";
		
		public int Hash {
			get;
			set;
		}
		
		public XBehaviorState(string name)
		{
			Name = name;
			Hash = GetHashCode();
			
		}
		
		public virtual void OnAwake(){
			for( int pos = 0; pos < actions.Count; pos++ ) {
				//  TODO loop in actions.Count
				actions[pos].OnAwake();
			}
		}
		
		public virtual void OnStart(){
			for( int pos = 0; pos < actions.Count; pos++ ) {
				//  TODO loop in actions.Count
				actions[pos].OnStart();
			}
		}
		
		public virtual void OnEnter(){
			for( int pos = 0; pos < actions.Count; pos++ ) {
				//  TODO loop in actions.Count
				actions[pos].OnEnter();
			}
		}
		
		public virtual void OnUpdate(){
			for( int pos = 0; pos < actions.Count; pos++ ) {
				//  TODO loop in actions.Count
				
			}
		}
		
		public void AddAction(XBehaviorAction action){
			actions.Add(action);
		}
		public void AddEvent(XBehaviorEvent behaviorEvent){
			events.Add(behaviorEvent);
		}
		public void RemoveEvent(XBehaviorEvent behaviorEvent){
			events.Remove(behaviorEvent);
		}
		public void RemoveAction(XBehaviorAction action){
			actions.Remove(action);
		}
		
		
	}
}

